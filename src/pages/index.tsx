import Head from "next/head";
import Image from "next/image";
import styles from "@/styles/Home.module.css";
import { useState } from "react";

import StakeInfo from "@/components/stake/stakeInfo";

import stakeABI from "@/contracts/Stake.json";
import tokenABI from "@/contracts/mockToken.json";
import {
  usePrepareContractWrite,
  useContractWrite,
  useContractRead,
  erc20ABI,
} from "wagmi";
import { BigNumber, utils } from "ethers";

export default function Home() {
  const [isNetworkSwitchHighlighted, setIsNetworkSwitchHighlighted] =
    useState(false);
  const [isConnectHighlighted, setIsConnectHighlighted] = useState(false);
  const [StakeTierSelected, setStakeTierSelected] = useState(0);

  const tokenAddr = "0x20528bAa3a012D09D4469B5A67CabeC492C9aBBD";
  const stakeAddr = "0xe0576aa186E47131D864d32ccb36FC6e6e0BB2d3";

  const { config, error: contractWriteError } = usePrepareContractWrite({
    address: tokenAddr,
    abi: erc20ABI,
    functionName: "approve",
    args: [
      "0x71d27375B1D112c63391d72846B56513967FE93D",
      utils.parseEther("100").toBigInt(),
    ],
  });

  const stakeTries = [
    {
      days: 120,
      minAmount: 50,
      ROI: 1,
    },
    {
      days: 150,
      minAmount: 150,
      ROI: 1.1,
    },
    {
      days: 180,
      minAmount: 500,
      ROI: 1.4,
    },
  ];

  // Get the write function
  const {
    data: writeData,
    isLoading: writeLoading,
    write,
  } = useContractWrite(config);

  // Read values from the smart contract
  const { data: readData, isLoading: readLoading } = useContractRead({
    address: tokenAddr,
    abi: erc20ABI,
    functionName: "balanceOf",
    args: ["0x71d27375B1D112c63391d72846B56513967FE93D"],
  });

  function CallWriteFunction() {
    // Configure the write function call
    const { config, error } = usePrepareContractWrite({
      address: tokenAddr,
      abi: erc20ABI,
      functionName: "transfer",
      args: [
        "0x71d27375B1D112c63391d72846B56513967FE93D",
        utils.parseEther("100").toBigInt(),
      ],
    });

    // Get the write function
    const {
      data,
      isLoading,
      error: writeError,
      write,
    } = useContractWrite(config);

    if (isLoading) return <p>Please confirm the transaction on your wallet</p>;

    if (writeError) return <p>Could not send the transaction</p>;

    if (error)
      return (
        <p>
          The transaction is expected to fail with this error:{" "}
          {error.reason ?? error.message}
        </p>
      );

    if (data)
      return (
        <p>The transaction was sent, Here is its hash: {writeData.hash}</p>
      );

    return (
      <div>
        {!writeLoading && (
          <button disabled={!write} onClick={() => write()}>
            Write function
          </button>
        )}
      </div>
    );
  }

  const closeAll = () => {
    setIsNetworkSwitchHighlighted(false);
    setIsConnectHighlighted(false);
  };
  return (
    <>
      <Head>
        <title>WalletConnect | Next Starter Template</title>
        <meta name="description" content="Generated by create-wc-dapp" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <header>
        <div
          className={styles.backdrop}
          style={{
            opacity: isConnectHighlighted || isNetworkSwitchHighlighted ? 1 : 0,
          }}
        />
        <div className={styles.header}>
          <div className={styles.logo}>
            <Image
              src="/logo.svg"
              alt="WalletConnect Logo"
              height="32"
              width="203"
            />
          </div>
          <div className={styles.buttons}>
            <div
              onClick={closeAll}
              className={`${styles.highlight} ${
                isNetworkSwitchHighlighted ? styles.highlightSelected : ``
              }`}
            >
              <w3m-network-button />
            </div>
            <div
              onClick={closeAll}
              className={`${styles.highlight} ${
                isConnectHighlighted ? styles.highlightSelected : ``
              }`}
            >
              <w3m-button />
            </div>
          </div>
        </div>
      </header>
      <div className={styles.main}>
        <div className={styles.stakeWapper}>
          {stakeTries.map((stakeTier, i) => {
            return (
              <div
                key={i}
                onClick={() => setStakeTierSelected(i)}
                className={styles.wrapperParcialWidth}
              >
                <StakeInfo
                  days={stakeTier.days}
                  minAmount={stakeTier.minAmount}
                  ROI={stakeTier.ROI}
                />
              </div>
            );
          })}
          <button className={styles.wrapperFullWidth}>
            Select ðŸ‘‰ staking to {stakeTries[StakeTierSelected].days} Roi{" "}
            {stakeTries[StakeTierSelected].ROI}%:{" "}
            <input type="number" name="amount" id="amount" />
          </button>
          <button className={styles.wrapperFullWidth}>INICIAR STAKING</button>
          <button className={styles.wrapperParcialWidth}>REINVEST</button>
          <button className={styles.wrapperParcialWidth}>WITHDRAW</button>
          <button className={styles.wrapperParcialWidth}>UNSTAKE</button>
          <div className={styles.wrapperParcialWidth}>
            {writeLoading && (
              <p>Please confirm the transaction on your wallet</p>
            )}
            {writeData && (
              <p>
                The transaction was sent! Here is the hash: {writeData.hash}
              </p>
            )}
            {!writeLoading && (
              <button disabled={!write} onClick={() => write()}>
                Approve
              </button>
            )}
            {contractWriteError && (
              <p>
                Calling that contract function will fail for this reason:
                {contractWriteError.reason ?? contractWriteError.message}
              </p>
            )}
          </div>
          <div className={styles.wrapperParcialWidth}>
            {readData != null && (
              <p>
                Balance {String(readData)} USDT
              </p>
            )}
          </div>
        </div>
      </div>
    </>
  );
}
